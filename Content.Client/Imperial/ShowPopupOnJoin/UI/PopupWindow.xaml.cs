using Content.Client.Imperial.ShowPopupOnJoin.Prototypes;
using Content.Client.Resources;
using Content.Shared.Imperial.ICCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.ContentPack;
using Robust.Shared.Utility;
using System.IO;
using System.Linq;

namespace Content.Client.Imperial.ShowPopupOnJoin.UI;

[GenerateTypedNameReferences]
public sealed partial class PopupWindow : DefaultWindow
{
    [Dependency] private readonly IUriOpener _uriOpener = default!;
    [Dependency] private readonly IResourceCache _resCache = default!;

    public PopupWindow(PopupWindowPrototype prototype)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Title = prototype.Title;
        TextContent.SetMessage(FormattedMessage.FromMarkup(prototype.Content));

        Resizable = false;

        if (!string.IsNullOrEmpty(prototype.QRCodePath))
            QRImage.Texture = _resCache.GetTexture(prototype.QRCodePath);
        else
            QRImage.Parent?.RemoveChild(QRImage);
        SetWidth = 500;

        var neverShow = (BaseButton.ButtonEventArgs e) =>
        {
            SetReaded(prototype.ID);
            Close();
        };

        NeverShowButton.OnPressed += neverShow;

        OpenLinkButton.OnPressed += neverShow;
        OpenLinkButton.OnPressed +=
            e => _uriOpener.OpenUri(prototype.Url);
    }

    static ResPath _path = new ResPath("ImperialPopupData.txt").ToRootedPath();

    // Temporary solution
    public static void SetReaded(string id)
    {
        var resources = IoCManager.Resolve<IResourceManager>();

        resources.UserData.CreateDir(_path.Directory);
        resources.UserData.WriteAllText(_path, string.Join(',', GetReaded().Append(id)));
    }

    public static IEnumerable<string> GetReaded() =>
        IoCManager.Resolve<IResourceManager>().UserData.TryReadAllText(_path, out var text) ? text.Split(',') : [];
}
